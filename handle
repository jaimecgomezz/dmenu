#!/usr/bin/env bash

##############################
# @jaimecgomezz
#
# This script handles all the
# actions related to patches
# on this dmenu distribution
##############################

set -e

SHOULD_REDIRECT="0"        # Quiet by default
PATCH_ACTION="patch"
DEPATCH_ACTION="depatch"
TRACK_FILE="applied"
USAGE_FILE="handle-usage"

print_usage() { cat "$USAGE_FILE" ; exit 1 ; }
redirect_output() { eval "$@ > /dev/null 2>&1" ; }
contains() {
  str="$1"; substr="$2"
  if test "${str#*$substr}" != "$str"; then return 0; fi
  return 1
}
report_applied() { report_patch_conflict "$1" "has" "remove" ; exit 1 ; }
report_unapplied() { report_patch_conflict "$1" "hasn't" "add" ; exit 1 ; }
report_patch_conflict() { echo "[!] ( $1 ) $2 been applied, $3 the patch name from/to the '$TRACK_FILE' file if mistaken" ; }


# Test args syntax
[ "$#" -lt 2 ] && print_usage
action="$1"; patch="$2"; shift; shift
case "$action" in
  patch)
  ;;
  depatch)
    options="-R"
  ;;
  *)
    print_usage
  ;;
esac
contains "$@" "-d" && SHOULD_REDIRECT="1"

# Verify patch exists
patches="$( ls patches/*patch | sed -E 's/(^.*\/)(.*)(\..*)/\2/g' )"
if ! echo "$patches" | grep -q "$patch"; then print_usage; fi

# Verify patch status, patched or not
if cat "$TRACK_FILE" | grep -q "$patch"; then
  [ "$action" = "$DEPATCH_ACTION" ] || report_applied "$patch"
else
  [ "$action" = "$PATCH_ACTION" ] || report_unapplied "$patch"
fi

# Patch handlers definition
apply_patch="patch -p1 $options < patches/${patch}.patch"
build_dmenu="sudo make install clean"

# Patch and build quietly by default, unless -d used
[ "$SHOULD_REDIRECT" = "0" ] && redirect_output "$apply_patch" || eval "$apply_patch"
[ "$SHOULD_REDIRECT" = "0" ] && redirect_output "$build_dmenu" || eval "$build_dmenu"

# Keep track of applied patches
[ "$action" = "$PATCH_ACTION" ] || sed -i "/^${patch}$/d" "$TRACK_FILE" # If depatch, remove it from track file
[ "$action" = "$DEPATCH_ACTION" ] || echo "$patch" >> "$TRACK_FILE"     # If patch, add it to the trask file

