diff --git a/config.def.h b/config.def.h
index 71a9451..e883760 100644
--- a/config.def.h
+++ b/config.def.h
@@ -35,5 +35,5 @@ static const char worddelimiters[] = " ";
 // <<<<<<<<<<<<<<<<<<<< dynamic-options
 
 // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-// ==================== fuzzymatch
+static int fuzzy = 1;                      /* -F  option; if 0, dmenu doesn't use fuzzy matching     */
 // <<<<<<<<<<<<<<<<<<<< fuzzymatch
diff --git a/config.mk b/config.mk
index 9c710e6..75264eb 100644
--- a/config.mk
+++ b/config.mk
@@ -22,7 +22,7 @@ FREETYPEINC = /usr/include/freetype2
 INCS = -I$(X11INC) -I$(FREETYPEINC)
 # >>>>>>>>>>>>>>>>>>>> fuzzymatch
 # ==================== fuzzymatch
-LIBS = -L$(X11LIB) -lX11 $(XINERAMALIBS) $(FREETYPELIBS)
+LIBS = -L$(X11LIB) -lX11 $(XINERAMALIBS) $(FREETYPELIBS) -lm
 # <<<<<<<<<<<<<<<<<<<< fuzzymatch
 
 # flags
diff --git a/dmenu.1 b/dmenu.1
index e4473d6..4bfcd2e 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -14,7 +14,7 @@ dmenu \- dynamic menu
 \" ==================== center
 \" <<<<<<<<<<<<<<<<<<<< center
 \" >>>>>>>>>>>>>>>>>>>> fuzzymatch
-\" ==================== fuzzymatch
+.RB [ \-F ]
 \" <<<<<<<<<<<<<<<<<<<< fuzzymatch
 .RB [ \-m
 .IR monitor ]
@@ -75,7 +75,9 @@ prints version information to stdout, then exits.
 \" ==================== center
 \" <<<<<<<<<<<<<<<<<<<< center
 \" >>>>>>>>>>>>>>>>>>>> fuzzymatch
-\" ==================== fuzzymatch
+.B \-F
+disables de fuzzymatch on dmenu.
+.TP
 \" <<<<<<<<<<<<<<<<<<<< fuzzymatch
 .BI \-m " monitor"
 dmenu is displayed on the monitor number supplied. Monitor numbers are starting
diff --git a/dmenu.c b/dmenu.c
index f5ef50e..4f03814 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -2,7 +2,7 @@
 #include <ctype.h>
 #include <locale.h>
 // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-// ==================== fuzzymatch
+#include <math.h>
 // <<<<<<<<<<<<<<<<<<<< fuzzymatch
 #include <stdio.h>
 #include <stdlib.h>
@@ -36,7 +36,7 @@ struct item {
 	struct item *left, *right;
 	int out;
   // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-  // ==================== fuzzymatch
+  double distance;
   // <<<<<<<<<<<<<<<<<<<< fuzzymatch
 };
 
@@ -224,7 +224,95 @@ grabkeyboard(void)
 }
 
 // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-// ==================== fuzzymatch
+int
+compare_distance(const void *a, const void *b)
+{
+	struct item *da = *(struct item **) a;
+	struct item *db = *(struct item **) b;
+
+	if (!db)
+		return 1;
+	if (!da)
+		return -1;
+
+	return da->distance == db->distance ? 0 : da->distance < db->distance ? -1 : 1;
+}
+
+void
+fuzzymatch(void)
+{
+	/*bang - we have so much memory */
+	struct item * it;
+	struct item **fuzzymatches = NULL;
+	char c;
+	int number_of_matches = 0, i, pidx, sidx, eidx;
+	int text_len = strlen(text), itext_len;
+
+	matches = matchend = NULL;
+
+	/*walk through all items */
+	for (it = items; it && it->text; it++)
+	{
+		if (text_len)
+		{
+			itext_len = strlen(it->text);
+			pidx = 0; /*pointer */
+			sidx = eidx = -1; /*start of match, end of match */
+			/*walk through item text */
+			for (i = 0; i < itext_len && (c = it->text[i]); i++)
+			{ /*fuzzy match pattern */
+				if (!fstrncmp(&text[pidx], &c, 1))
+				{
+					if (sidx == -1)
+						sidx = i;
+					pidx++;
+					if (pidx == text_len)
+					{
+						eidx = i;
+						break;
+					}
+				}
+			}
+			/*build list of matches */
+			if (eidx != -1)
+			{ /*compute distance */
+				/*add penalty if match starts late (log(sidx+2))
+				 *add penalty for long a match without many matching characters */
+				it->distance = log(sidx + 2) + (double)(eidx - sidx - text_len);
+				/*fprintf(stderr, "distance %s %f\n", it->text, it->distance); */
+				appenditem(it, &matches, &matchend);
+				number_of_matches++;
+			}
+		}
+		else
+		{
+			appenditem(it, &matches, &matchend);
+		}
+	}
+
+	if (number_of_matches)
+	{
+		/*initialize array with matches */
+		if (!(fuzzymatches = realloc(fuzzymatches, number_of_matches* sizeof(struct item *))))
+			die("cannot realloc %u bytes:", number_of_matches* sizeof(struct item *));
+		for (i = 0, it = matches; it && i < number_of_matches; i++, it = it->right)
+		{
+			fuzzymatches[i] = it;
+		}
+		/*sort matches according to distance */
+		qsort(fuzzymatches, number_of_matches, sizeof(struct item *), compare_distance);
+		/*rebuild list of matches */
+		matches = matchend = NULL;
+		for (i = 0, it = fuzzymatches[i]; i < number_of_matches && it && \
+			it->text; i++, it = fuzzymatches[i])
+		{
+			appenditem(it, &matches, &matchend);
+		}
+		free(fuzzymatches);
+	}
+	curr = sel = matches;
+	calcoffsets();
+}
 // <<<<<<<<<<<<<<<<<<<< fuzzymatch
 
 // >>>>>>>>>>>>>>>>>>>> dynamic-options
@@ -239,7 +327,10 @@ match(void)
   // <<<<<<<<<<<<<<<<<<<< dynamic-options
 
   // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-  // ==================== fuzzymatch
+	if (fuzzy) {
+		fuzzymatch();
+		return;
+	}
   // <<<<<<<<<<<<<<<<<<<< fuzzymatch
 
 	static char **tokv = NULL;
@@ -775,7 +866,7 @@ usage(void)
     // ==================== center
     // <<<<<<<<<<<<<<<<<<<< center
     // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-    // ==================== fuzzymatch
+    "[-F]"
     // <<<<<<<<<<<<<<<<<<<< fuzzymatch
     "\n\t\t"
     "[-m monitor]"
@@ -823,7 +914,8 @@ main(int argc, char *argv[])
     // ==================== center
     // <<<<<<<<<<<<<<<<<<<< center
     // >>>>>>>>>>>>>>>>>>>> fuzzymatch
-    // ==================== fuzzymatch
+		else if (!strcmp(argv[i], "-F")) /*grabs keyboard before reading stdin */
+			fuzzy = 0;
     // <<<<<<<<<<<<<<<<<<<< fuzzymatch
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
